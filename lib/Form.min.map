{"version":3,"sources":["webpack://formla/webpack/bootstrap","webpack://formla/./src/utils.js","webpack://formla/./src/Errors.js","webpack://formla/./src/Form.js","webpack://formla/./src/http.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isFile","val","Blob","isObj","isArr","Array","isNil","isStr","Errors","this","errors","elements","field","RegExp","keys","some","test","length","error","force","has","timeout","window","setTimeout","clear","el","forEach","addElement","push","options","behavior","inline","element","find","rx","expression","string","replace","escapeRegExp","scrollIntoView","flattenToQueryParams","data","prefix","params","item","paramKey","formValueToString","toString","Form","setOptions","originalData","originalConstantData","append","defaultOptions","constant","parseData","set","Error","newValue","setData","autoRemoveError","obj","hasOwn","original","emptyValue","clone","JSON","parse","stringify","event","node","target","HTMLInputElement","DragEvent","dataTransfer","files","url","submit","method","parseOptions","formData","requestOptions","getData","shouldConvertToFormData","FormData","httpAdapter","sendWith","buildBaseUrl","then","response","isValidationError","onFail","onSuccess","catch","Promise","reject","bubbleError","useJson","hasFile","strictMode","containsFile","File","reset","quiet","formatErrorResponse","record","hasElements","scrollToFirst","includes","baseUrl","relativeUrl","queryStart","fullUrl","properties","join","xhr","XMLHttpRequest","resolve","onload","status","onerror","open","setRequestHeader","send","e","values","message","isValidErrorObject"],"mappings":"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","file":"Form.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// @flow\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport function hasOwn (obj: Object, key: string): boolean %checks {\n    return hasOwnProperty.call(obj, key)\n}\n\nexport function isFile(val: mixed): boolean %checks {\n    return !!val && (val instanceof Blob);\n}\n\nexport function clone(obj: any): any {\n    return JSON.parse(JSON.stringify(obj));\n}\n\nexport function emptyValue(original: mixed): Array<any> | {} | '' | null {\n    if (original instanceof Array) {\n        return [];\n    }\n    if (typeof original === 'object') {\n        return {};\n    }\n    if (typeof original === 'string') {\n        return '';\n    }\n    return null;\n}\n\nexport function isObj(value: mixed): boolean %checks {\n    return value !== null && typeof value === 'object';\n}\n\nexport function isArr(value: mixed): %checks {\n    return value instanceof Array;\n}\n\nexport function isNil(value: mixed): %checks {\n    return value == null;\n}\n\nexport function isFunc(value: mixed): %checks {\n    return value instanceof Function;\n}\n\nexport function isStr(value: mixed): %checks {\n    return typeof value === 'string';\n}\n\nexport function escapeRegExp(string: string) {\n    return string.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&');\n}\n\nexport function containsFile(obj: any): boolean {\n    if (isArr(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            if (obj[i] instanceof File) {\n                return true;\n            }\n            if (isObj(obj[i])) {\n                return containsFile(obj[i]);\n            }\n        }\n    } else {\n        for (let key in obj) {\n            if (obj[key] instanceof File) {\n                return true;\n            }\n            if (isObj(obj[key])) {\n                return containsFile(obj[key]);\n            }\n        }\n    }\n    return false;\n}\n","// @flow\nimport {escapeRegExp, isArr, isNil} from \"./utils\";\n\ntype ErrorValue = string | Array<string>;\nexport type ErrorValues = { [string]: ErrorValue };\n\nclass Errors {\n\n    errors: ErrorValues;\n    elements: Array<{ key: string | RegExp, el: Element }>;\n\n    /**\n     * Create a new Errors instance.\n     */\n    constructor() {\n        this.errors = {};\n        this.elements = [];\n    }\n\n    /**\n     * Determine if an errors exists for the given field.\n     *\n     * @param {string|RegExp} field\n     */\n    has(field: string | RegExp): boolean {\n        if (field instanceof RegExp) {\n            return Object.keys(this.errors).some(key => field.test(key));\n        }\n        return this.errors.hasOwnProperty(field);\n    }\n\n    /**\n     * Determine if we have any errors.\n     */\n    any(): boolean {\n        return Object.keys(this.errors).length > 0;\n    }\n\n    /**\n     * Retrieve the error message for a field.\n     *\n     * @param {string} field\n     */\n    getFirst(field: string): ?string {\n        let error = this.get(field);\n        if (error) {\n            if (isArr(error)) {\n                return error.length ? error[0] : null;\n            } else {\n                return error || null;\n            }\n        }\n    }\n\n    get(field: string) {\n        return this.errors[field];\n    }\n\n    /**\n     * Add a new error message if one doesn't already exist.\n     *\n     * @param {string} field\n     * @param error\n     * @param force\n     */\n    add(field: string, error: ErrorValue, force: boolean = false) {\n        if (!this.has(field) || force) {\n            this.errors[field] = error;\n        }\n    }\n\n    /**\n     * Record the new errors.\n     *\n     * @param {object} errors\n     * @param timeout\n     */\n    record(errors: ErrorValues, timeout: ?(false | number) = 3000) {\n        this.errors = errors;\n        if (timeout) {\n            window.setTimeout(() => {\n                this.clear();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Clear one or all error fields.\n     *\n     * @param {string|null} field\n     */\n    clear(field: ?string) {\n        if (field) {\n            delete this.errors[field];\n\n            return;\n        }\n\n        this.errors = {};\n    }\n\n    addElement(key: string | RegExp | string[], el: Element) {\n        if (isArr(key)) {\n            key.forEach(field => this.addElement(field, el));\n        } else {\n            this.elements.push({ key, el });\n        }\n    }\n\n    hasElements(): boolean {\n        return !!this.elements.length;\n    }\n\n    scrollToFirst(options: ?boolean | {\n        behavior?: ('auto' | 'instant' | 'smooth'),\n        block?: ('start' | 'center' | 'end' | 'nearest'),\n        inline?: ('start' | 'center' | 'end' | 'nearest'),\n    } = null) {\n        options = isNil(options) ? { behavior: 'smooth', inline: 'center' } : options;\n\n        const element = this.elements.find(({ key, el }) => {\n            let rx: RegExp;\n            if (key instanceof RegExp) {\n                rx = key;\n            } else {\n                let expression = escapeRegExp(key);\n                rx = new RegExp(expression.replace('*', '.*'));\n            }\n\n            if (Object.keys(this.errors).some(key => rx.test(key))) {\n                return true;\n            }\n        });\n\n        if (element) {\n            element.el.scrollIntoView(options);\n        }\n    }\n}\n\nexport default Errors;\n","// @flow\nimport {isFile, clone, hasOwn, emptyValue, isObj, isNil, isArr, containsFile, isStr} from \"./utils\";\nimport Errors from \"./Errors\";\nimport http from \"./http\";\nimport type { Method } from './flow';\nimport type { ErrorValues } from \"./Errors\";\n\ntype ErrorResponse = {\n    status: number,\n    response: {\n        errors: {\n            [string]: Array<string> | string\n        }\n    }\n}\n\ntype PrimitiveFormValue = string | number | boolean | null | typeof undefined;\n\ntype ScalarFormValue = PrimitiveFormValue | Blob | File;\n\ntype FormValue = ScalarFormValue | Array<?FormValue> | { [string]: ?FormValue };\n\nexport type Data = { [string]: FormValue };\n\ntype Options = {\n    method: Method,\n    baseUrl: string,\n    url: string,\n    sendWith: (method: Method, url: string, data: FormData | Data) => Promise<any>,\n    useJson: boolean,\n    strictMode: boolean,\n    isValidationError: ({ status: number }) => boolean,\n    formatErrorResponse: (any) => ErrorValues,\n    timeout: false | number,\n    autoRemoveError: boolean,\n    clear: boolean,\n    quiet: boolean,\n    clone: boolean,\n}\n\ntype PartialOptions = $Shape<Options>;\n\nfunction parseOptions(method: ?(Method | PartialOptions), url: ?(string | PartialOptions), options: ?PartialOptions): PartialOptions {\n    method = method ? (isObj(method) ? method : { method }) : {};\n    url = url ? (isObj(url) ? url : { url }) : {};\n    options = options || {};\n\n    return {\n        ...options,\n        ...url,\n        ...method,\n    }\n}\n\nfunction flattenToQueryParams(data: Data | Array<FormValue>, prefix: string = ''): { [string]: string | Blob | File } {\n    let params = {};\n\n    if (isArr(data)) {\n        data.forEach(item => {\n            let paramKey = `${prefix}[]`;\n\n            if (isObj(item) && !isFile(item)) {\n                params = {\n                    ...params,\n                    ...flattenToQueryParams(item, paramKey)\n                };\n                return;\n            }\n\n            params[paramKey] = isFile(item) ? item : formValueToString(item);\n        })\n    } else {\n        Object.keys(data).forEach(key => {\n            let item = data[key];\n\n            let paramKey = prefix ? `${prefix}[${key}]` : '' + key;\n\n            if (isObj(item) && !isFile(item)) {\n                params = {\n                    ...params,\n                    ...flattenToQueryParams(item, paramKey)\n                };\n                return;\n            }\n\n            params[paramKey] = isFile(item) ? item : formValueToString(item);\n        });\n    }\n\n    return params;\n}\n\nfunction formValueToString(value: PrimitiveFormValue): string {\n    if (typeof value === 'boolean') {\n        return ''+(+value);\n    }\n    if (typeof value === 'number') {\n        return value.toString();\n    }\n    return value || '';\n}\n\nfunction bubbleError(error: Error | Object): Promise<Object> {\n    if (error instanceof Error) {\n        throw error;\n    }\n    return Promise.reject(error);\n}\n\nfunction isValidErrorObject(errors) {\n    return !errors ||\n        typeof errors !== 'object' ||\n        !Object.keys(errors).length ||\n        Object.values(errors).some(error => {\n            if (isArr(error)) {\n                return error.some(message => !isStr(message));\n            }\n            return !isStr(error);\n        });\n}\n\nclass Form {\n\n    errors: Errors;\n\n    data: Data;\n    originalData: Data;\n    originalConstantData: Data;\n    options: Options;\n\n    static defaultOptions: Options = {\n        // The default method type used by the submit method\n        method: 'post',\n\n        // If set any relative urls will be appended to the baseUrl\n        baseUrl: '',\n\n        // The url to submit the form\n        url: '',\n\n        // A callback to implement custom HTTP logic.\n        // It is recommended to use this option so the form can utilise your HTTP library.\n        // The callback should return a promise that the form can use to handle the response.\n        sendWith: http,\n\n        // Set to true if you want the form to submit the data as a json object.\n        // This will pass the data as a JavaScript object to the sendWith callback so it is up to you to stringify it for your HTTP library.\n        // If the data contains a File or Blob object the data will be a FormData object regardless of this option (unless strictMode is true).\n        useJson: false,\n\n        // If set to true the form will throw an Error if the data has a File or Blob object and the useJson option is true.\n        strictMode: false,\n\n        // The status code for which the form should handle validation errors.\n        isValidationError: ({ status }) => status === 422,\n\n        // A callback that should turn the error response into an object of field names and their validation errors.\n        formatErrorResponse: (response) => {\n            let data = response.data || response.response;\n            if (typeof data === 'string') {\n                try {\n                    data = JSON.parse(data);\n                } catch (e) {\n                    throw new Error('Unable to find errors in the response');\n                }\n            }\n            let errors: ErrorValues = data.errors;\n            if (isValidErrorObject(errors)) {\n                throw new Error('Unable to find errors in the response');\n            }\n            return errors;\n        },\n\n        // The number of milliseconds to wait before clearing the error messages.\n        // When timeout is false the error messages will stay indefinitely.\n        timeout: false,\n\n        // When set to true the errors for a field will be cleared when that field's value is updated.\n        autoRemoveError: true,\n\n        // When set to true, the data will be reverted to it's original values after a successful request.\n        clear: true,\n\n        // When set to true, no errors will be recorded.\n        quiet: false,\n\n        // If clone is set to false any nested objects and arrays will be stored in the form by reference.\n        clone: true,\n    };\n\n    static setOptions = function (options: Options) {\n        Form.defaultOptions = {\n            ...Form.defaultOptions,\n            ...options\n        };\n    };\n\n    constructor(data: Data, options: ?Options) {\n        this.setOptions(options);\n\n        this.originalData = {};\n        this.originalConstantData = {};\n        this.data = {};\n\n        this.append(data);\n\n        this.errors = new Errors();\n    }\n\n    setOptions(options: ?Options) {\n        this.options = this.options || Form.defaultOptions;\n        if (options) {\n            this.options = {\n                ...this.options,\n                ...options,\n            }\n        }\n    }\n\n    append(key: string | Data, value: FormValue, constant: ?boolean = false): Form {\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(field => {\n                this.append(field, key[field], constant);\n            });\n            return this;\n        }\n\n        value = this.parseData(value);\n        if (constant) {\n            this.originalConstantData[key] = value;\n        } else {\n            this.originalData[key] = value;\n        }\n        if (!constant) {\n            this.data[key] = value;\n            this.defineProperty(key);\n        } else {\n            Object.defineProperty(\n                this,\n                key,\n                {\n                    get: () => undefined,\n                    set: () => {\n                        throw new Error(`The \"${key}\" value has been set as constant and cannot be modified`);\n                    }\n                }\n            );\n        }\n\n        return this;\n    }\n\n    defineProperty(key: string) {\n        Object.defineProperty(\n            this,\n            key,\n            {\n                get: () => this.data[key],\n                set: (newValue: FormValue) => {\n                    this.setData(key, newValue);\n                }\n            }\n        );\n    }\n\n    constantData(key: string | Data, value: FormValue): Form {\n        return this.append(key, value, true);\n    }\n\n    getData(): Data {\n        return {\n            ...this.data,\n            ...this.originalConstantData,\n        }\n    }\n\n    setData(key: string, value: FormValue) {\n        this.data[key] = value;\n        if (this.options.autoRemoveError) {\n            this.errors.clear(key);\n        }\n    }\n\n    reset(): Form {\n        for (let field in this.data) {\n            this.data[field] = this.originalData[field];\n        }\n\n        this.errors.clear();\n\n        return this;\n    }\n\n    clear(field: string): Form {\n        if (hasOwn(this, field)) {\n            this.data[field] = emptyValue(this.data[field]);\n        }\n        return this;\n    }\n\n    parseData(data: FormValue): FormValue {\n        return this.options.clone && !isFile(data) ? clone(data) : data;\n    }\n\n    addFileFromEvent(event: Event | DragEvent, key: ?string): Form {\n        let node = event.target;\n        if (!(node instanceof HTMLInputElement)) {\n            throw new Error('Incompatible event target, must be of type HTMLInputElement');\n        }\n        if (!key) {\n            key = node.name;\n        }\n        if (key in this && (node.value !== '')) {\n            if (event instanceof DragEvent) {\n                this.setData(key, event.dataTransfer && event.dataTransfer.files.length && event.dataTransfer.files[0]);\n            } else {\n                this.setData(key, node.files && node.files.length && node.files[0]);\n            }\n            node.value = '';\n        }\n        return this;\n    }\n\n    post(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('post', url, options);\n    }\n\n    put(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('put', url, options);\n    }\n\n    patch(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('patch', url, options);\n    }\n\n    delete(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('delete', url, options);\n    }\n\n    get(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('get', url, options);\n    }\n\n    submit(method: Method | Options, url: ?string | Options, options: ?Options): Promise<any> {\n        options = parseOptions(method, url, options);\n        const requestOptions = {\n            ...this.options,\n            ...options,\n        };\n\n        let formData, data = this.getData();\n        if (this.shouldConvertToFormData(requestOptions)) {\n            formData = new FormData();\n\n            let params = flattenToQueryParams(data);\n\n            Object.keys(params).forEach(key => {\n                formData.append(key, params[key]);\n            });\n\n            data = formData;\n        }\n\n        let httpAdapter = requestOptions.sendWith;\n\n        return httpAdapter(requestOptions.method, this.buildBaseUrl(requestOptions), data).then(response => {\n            if (requestOptions.isValidationError(response)) {\n                this.onFail(response, requestOptions);\n            } else {\n                this.onSuccess(requestOptions);\n            }\n            return response;\n        }).catch(error => {\n            if (requestOptions.isValidationError(error)) {\n                this.onFail(error, requestOptions);\n            }\n            return bubbleError(error);\n        });\n    }\n\n    shouldConvertToFormData(options: ?Options) {\n        options = options || this.options;\n        if (!options.useJson) {\n            return true;\n        }\n        if (this.hasFile() && options.strictMode) {\n            throw new Error('Cannot convert a file to JSON');\n        }\n        return this.hasFile();\n    }\n\n    hasFile(): boolean {\n        return containsFile(this.getData());\n    }\n\n    onSuccess(options: ?Options) {\n        options = options || this.options;\n        if (options.clear) {\n            this.reset();\n        }\n    }\n\n    onFail(error: XMLHttpRequest, options: ?Options) {\n        options = options || this.options;\n        if (!options.quiet) {\n            let errors = options.formatErrorResponse(error);\n            this.errors.record(errors, options.timeout);\n            if (this.errors.hasElements()) {\n                this.errors.scrollToFirst();\n            }\n        }\n    }\n\n    buildBaseUrl(options: ?Options) {\n        options = options || this.options;\n        if (options.url.includes('://')) {\n            return options.url;\n        }\n        let baseUrl = options.baseUrl;\n        let relativeUrl = options.url;\n\n        baseUrl = baseUrl.replace(/\\/+$/g, '');\n        relativeUrl = relativeUrl.replace(/^\\/+/g, '');\n\n        return `${baseUrl}/${relativeUrl}`;\n    }\n\n    makeUrl(options: ?Options): string {\n        let url = this.buildBaseUrl(options);\n        let queryStart = url.includes('?') ? '&' : '?';\n        let fullUrl = url + queryStart;\n        let properties = [];\n        let data = this.getData();\n\n        let params = flattenToQueryParams(data);\n\n        Object.keys(params).forEach(key => {\n            let item = params[key];\n\n            if (isFile(item)) {\n                throw new Error('Cannot convert file to a string');\n            }\n\n            properties.push(key + (isNil(item) ? '' : `=${item}`));\n        });\n        return fullUrl + properties.join('&');\n    }\n\n    addElement(key: string, el: HTMLElement) {\n        this.errors.addElement(key, el);\n    }\n}\n\n\nexport default Form;\n","// @flow\nimport type { Method } from './flow';\nimport type { Data } from \"./Form\";\n\ntype Options = {\n    method: Method,\n    url: string,\n}\n\nexport default function http(method: Method, url: string, data: FormData | Data) {\n    let xhr = new XMLHttpRequest();\n\n    let response = new Promise<XMLHttpRequest>((resolve, reject) => {\n        xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                resolve(xhr);\n            } else {\n                reject(xhr);\n            }\n        };\n        xhr.onerror = () => reject(xhr);\n    });\n\n    xhr.open(method, url);\n    if (data instanceof FormData) {\n        xhr.setRequestHeader('Content-Type', 'multipart/form-data');\n        xhr.send(data);\n    } else {\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify(data));\n    }\n\n    return response;\n}"],"sourceRoot":""}