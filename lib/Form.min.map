{"version":3,"sources":["webpack://formla/webpack/universalModuleDefinition","webpack://formla/webpack/bootstrap","webpack://formla/./node_modules/extract-files/lib/ReactNativeFile.mjs","webpack://formla/./src/utils.js","webpack://formla/./src/Errors.js","webpack://formla/./src/Form.js","webpack://formla/./node_modules/extract-files/lib/extractFiles.mjs","webpack://formla/./src/http.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","m","ReactNativeFile","_ref","uri","name","type","this","hasOwnProperty","Object","prototype","hasOwn","obj","key","call","isFile","val","Blob","clone","isArr","map","includes","isObj","target","keys","forEach","value","Array","isNil","isStr","arrayToObject","array","item","index","Errors","errors","elements","field","RegExp","some","test","length","error","get","force","has","timeout","setTimeout","clear","el","addElement","push","element","filter","removeElementKey","options","behavior","inline","find","rx","expression","string","replace","escapeRegExp","scrollIntoView","set","split","shift","result","undefined","flattenToQueryParams","data","prefix","params","paramKey","formValueToString","toString","Form","setOptions","_originalData","_originalConstantData","_data","append","_errors","_options","defaultOptions","constant","parseData","defineProperty","Error","newValue","setData","autoRemoveError","original","emptyValue","event","node","HTMLInputElement","DragEvent","dataTransfer","files","url","submit","query","originalFormatDataCallback","formatData","graphql","useJson","hasFile","operations","variables","extractFiles","path","Map","addFile","paths","file","storedPaths","apply","File","FileList","i","isArray","child","constructor","JSON","stringify","from","values","post","method","parseOptions","formData","requestOptions","getData","shouldConvertToFormData","FormData","httpAdapter","sendWith","buildBaseUrl","then","response","isValidationError","onFail","onSuccess","catch","Promise","reject","bubbleError","strictMode","containsFile","reset","quiet","formatErrorResponse","record","hasElements","scrollToFirst","baseUrl","relativeUrl","queryStart","fullUrl","properties","join","removeElement","xhr","XMLHttpRequest","resolve","onload","status","onerror","open","setRequestHeader","send","parse","e","message","isValidErrorObject","c","d","getter","o","enumerable","r","Symbol","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","p","s","moduleId","l","modules"],"mappings":"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","file":"Form.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"formla\"] = factory();\n\telse\n\t\troot[\"formla\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export var ReactNativeFile = function ReactNativeFile(_ref) {\n  var uri = _ref.uri,\n    name = _ref.name,\n    type = _ref.type\n  this.uri = uri\n  this.name = name\n  this.type = type\n}\n","// @flow\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport function hasOwn (obj: Object, key: string): boolean %checks {\n    return hasOwnProperty.call(obj, key)\n}\n\nexport function isFile(val: mixed): boolean %checks {\n    return !!val && (val instanceof Blob);\n}\n\nexport function clone(obj: any): any {\n    if (isArr(obj)) {\n        return obj.map(clone);\n    }\n    if (obj === null || obj === undefined) {\n        return null;\n    }\n    if (isFile(obj) || ['number', 'string', 'boolean'].includes(typeof obj)) {\n        return obj;\n    }\n    if (isObj(obj)) {\n        let target = {};\n\n        Object.keys(obj).forEach((key) => target[key] = clone(obj[key]));\n\n        return target;\n    }\n}\n\nexport function emptyValue(original: mixed): Array<any> | {} | '' | null {\n    if (original instanceof Array) {\n        return [];\n    }\n    if (typeof original === 'object') {\n        return {};\n    }\n    if (typeof original === 'string') {\n        return '';\n    }\n    return null;\n}\n\nexport function isObj(value: mixed): boolean %checks {\n    return value !== null && typeof value === 'object';\n}\n\nexport function isArr(value: mixed): %checks {\n    return value instanceof Array;\n}\n\nexport function isNil(value: mixed): %checks {\n    return value == null;\n}\n\nexport function isFunc(value: mixed): %checks {\n    return value instanceof Function;\n}\n\nexport function isStr(value: mixed): %checks {\n    return typeof value === 'string';\n}\n\nexport function escapeRegExp(string: string) {\n    return string.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&');\n}\n\nexport function containsFile(obj: any): boolean {\n    if (isArr(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            if (obj[i] instanceof File) {\n                return true;\n            }\n            if (isObj(obj[i])) {\n                return containsFile(obj[i]);\n            }\n        }\n    } else {\n        for (let key in obj) {\n            if (obj[key] instanceof File) {\n                return true;\n            }\n            if (isObj(obj[key])) {\n                return containsFile(obj[key]);\n            }\n        }\n    }\n    return false;\n}\n\nexport function arrayToObject(array: any[]): { [string]: any } {\n    let target = {};\n\n    array.forEach((item, index) => {\n        target[index] = item;\n    });\n\n    return target;\n}\n","// @flow\nimport {escapeRegExp, isArr, isNil} from \"./utils\";\n\ntype ErrorValue = string | Array<string>;\nexport type ErrorValues = { [string]: ErrorValue };\n\nclass Errors {\n\n    errors: ErrorValues;\n    elements: Array<{ key: string | RegExp, el: Element }>;\n\n    /**\n     * Create a new Errors instance.\n     */\n    constructor() {\n        this.errors = {};\n        this.elements = [];\n    }\n\n    /**\n     * Determine if an errors exists for the given field.\n     *\n     * @param {string|RegExp} field\n     */\n    has(field: string | RegExp): boolean {\n        if (field instanceof RegExp) {\n            return Object.keys(this.errors).some(key => field.test(key));\n        }\n        return this.errors.hasOwnProperty(field);\n    }\n\n    /**\n     * Determine if we have any errors.\n     */\n    any(): boolean {\n        return Object.keys(this.errors).length > 0;\n    }\n\n    /**\n     * Retrieve the error message for a field.\n     *\n     * @param {string} field\n     */\n    getFirst(field: string): ?string {\n        let error = this.get(field);\n        if (error) {\n            if (isArr(error)) {\n                return error.length ? error[0] : null;\n            } else {\n                return error || null;\n            }\n        }\n    }\n\n    get(field: string) {\n        return this.errors[field];\n    }\n\n    /**\n     * Add a new error message if one doesn't already exist.\n     *\n     * @param {string} field\n     * @param error\n     * @param force\n     */\n    add(field: string, error: ErrorValue, force: boolean = false) {\n        if (!this.has(field) || force) {\n            this.errors[field] = error;\n        }\n    }\n\n    /**\n     * Record the new errors.\n     *\n     * @param {object} errors\n     * @param timeout\n     */\n    record(errors: ErrorValues, timeout: ?(false | number) = 3000) {\n        this.errors = errors;\n        if (timeout) {\n            window.setTimeout(() => {\n                this.clear();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Clear one or all error fields.\n     *\n     * @param {string|null} field\n     */\n    clear(field: ?string) {\n        if (field) {\n            delete this.errors[field];\n\n            return;\n        }\n\n        this.errors = {};\n    }\n\n    addElement(key: string | RegExp | string[], el: Element) {\n        if (isArr(key)) {\n            key.forEach(field => this.addElement(field, el));\n        } else {\n            this.elements.push({ key, el });\n        }\n    }\n\n    removeElement(element: Element) {\n        this.elements = this.elements.filter(({ el }) => el !== element);\n    }\n\n    removeElementKey(field: string | RegExp | string[]) {\n        if (isArr(field)) {\n            field.forEach(key => this.removeElementKey(key));\n        } else {\n            this.elements = this.elements.filter(({ key }) => key !== field);\n        }\n    }\n\n    hasElements(): boolean {\n        return !!this.elements.length;\n    }\n\n    scrollToFirst(options: ?boolean | {\n        behavior?: ('auto' | 'instant' | 'smooth'),\n        block?: ('start' | 'center' | 'end' | 'nearest'),\n        inline?: ('start' | 'center' | 'end' | 'nearest'),\n    } = null) {\n        options = isNil(options) ? { behavior: 'smooth', inline: 'center' } : options;\n\n        const element = this.elements.find(({ key, el }) => {\n            let rx: RegExp;\n            if (key instanceof RegExp) {\n                rx = key;\n            } else {\n                let expression = escapeRegExp(key);\n                rx = new RegExp(expression.replace('*', '.*'));\n            }\n\n            if (Object.keys(this.errors).some(key => rx.test(key))) {\n                return true;\n            }\n        });\n\n        if (element) {\n            element.el.scrollIntoView(options);\n        }\n    }\n}\n\nexport default Errors;\n","// @flow\nimport { extractFiles } from 'extract-files';\nimport type { ErrorValues } from './Errors';\nimport Errors from './Errors';\nimport type { Method } from './flow';\nimport http from './http';\nimport { arrayToObject, clone, containsFile, emptyValue, hasOwn, isArr, isFile, isNil, isObj, isStr } from './utils';\n\ntype PrimitiveFormValue = string | number | boolean | null | typeof undefined;\n\ntype ScalarFormValue = PrimitiveFormValue | Blob | File;\n\ntype FormValue = ScalarFormValue | Array<?FormValue> | { [string]: ?FormValue };\n\nexport type Data = { [string]: FormValue };\n\ntype Options = {\n    method: Method,\n    baseUrl: string,\n    url: string,\n    graphql: string,\n    sendWith: (method: Method, url: string, data: FormData | Data, options: Options) => Promise<any>,\n    useJson: boolean,\n    strictMode: boolean,\n    isValidationError: ({ status: number }) => boolean,\n    formatData: (Data) => Data,\n    formatErrorResponse: (any) => ErrorValues,\n    timeout: false | number,\n    autoRemoveError: boolean,\n    clear: boolean,\n    quiet: boolean,\n    clone: boolean,\n}\n\ntype PartialOptions = $Shape<Options>;\n\nfunction set(obj: FormValue, keys: number|string|string[], value: FormValue) {\n    if (isStr(keys) || (typeof keys === 'number')) {\n        keys = (''+keys).split('.');\n    }\n\n    let key = keys.shift();\n\n    if (!isObj(obj) || isFile(obj)) {\n        return;\n    }\n\n    if (!keys.length) {\n        if (isArr(obj)) {\n            obj[+key] = value;\n        } else {\n            obj[key] = value;\n        }\n    } else {\n        if (!hasOwn(obj, key)) {\n            if (isArr(obj)) {\n                obj[+key] = key === '0' ? [] : {};\n            } else {\n                obj[key] = key === '0' ? [] : {};\n            }\n        }\n        if (isArr(obj)) {\n            set(obj[+key], keys, value);\n        } else {\n            set(obj[key], keys, value);\n        }\n    }\n}\n\nfunction get(obj: FormValue, keys: string|string[]): FormValue {\n    if (isStr(keys)) {\n        keys = keys.split('.');\n    }\n\n    let key = keys.shift();\n\n    if (!isObj(obj) || isFile(obj) || !hasOwn(obj, key)) {\n        return undefined;\n    }\n\n    let result: FormValue;\n\n    if (isArr(obj)) {\n        result = obj[+key];\n    } else if (isObj(obj) && !isFile(obj)) {\n        result = obj[key];\n    } else {\n        result = undefined;\n    }\n\n    if (!keys.length) {\n        return result;\n    }\n    get(result, keys);\n}\n\nfunction parseOptions(method: ?(Method | PartialOptions), url: ?(string | PartialOptions), options: ?PartialOptions): PartialOptions {\n    method = method ? (isObj(method) ? method : { method }) : {};\n    url = url ? (isObj(url) ? url : { url }) : {};\n    options = options || {};\n\n    return {\n        ...options,\n        ...url,\n        ...method,\n    }\n}\n\nfunction flattenToQueryParams(data: Data | Array<FormValue>, prefix: string = ''): { [string]: string | Blob | File } {\n    let params = {};\n\n    if (isArr(data)) {\n        data.forEach(item => {\n            let paramKey = `${prefix}[]`;\n\n            if (isObj(item) && !isFile(item)) {\n                params = {\n                    ...params,\n                    ...flattenToQueryParams(item, paramKey)\n                };\n                return;\n            }\n\n            params[paramKey] = isFile(item) ? item : formValueToString(item);\n        })\n    } else {\n        Object.keys(data).forEach(key => {\n            let item = data[key];\n\n            let paramKey = prefix ? `${prefix}[${key}]` : '' + key;\n\n            if (isObj(item) && !isFile(item)) {\n                params = {\n                    ...params,\n                    ...flattenToQueryParams(item, paramKey)\n                };\n                return;\n            }\n\n            params[paramKey] = isFile(item) ? item : formValueToString(item);\n        });\n    }\n\n    return params;\n}\n\nfunction formValueToString(value: PrimitiveFormValue): string {\n    if (typeof value === 'boolean') {\n        return ''+(+value);\n    }\n    if (typeof value === 'number') {\n        return value.toString();\n    }\n    return value || '';\n}\n\nfunction bubbleError(error: Error | Object): Promise<Object> {\n    if (error instanceof Error) {\n        throw error;\n    }\n    return Promise.reject(error);\n}\n\nfunction isValidErrorObject(errors) {\n    return !errors ||\n        typeof errors !== 'object' ||\n        !Object.keys(errors).length ||\n        Object.values(errors).some(error => {\n            if (isArr(error)) {\n                return error.some(message => !isStr(message));\n            }\n            return !isStr(error);\n        });\n}\n\nclass Form {\n\n    _errors: Errors;\n\n    _data: Data;\n    _originalData: Data;\n    _originalConstantData: Data;\n    _options: Options;\n\n    static defaultOptions: Options = {\n        // The default method type used by the submit method\n        method: 'post',\n\n        // If set any relative urls will be appended to the baseUrl\n        baseUrl: '',\n\n        // The url to submit the form\n        url: '',\n\n        // The endpoint to use for all graphql queries\n        graphql: 'graphql',\n\n        // A callback to implement custom HTTP logic.\n        // It is recommended to use this option so the form can utilise your HTTP library.\n        // The callback should return a promise that the form can use to handle the response.\n        sendWith: http,\n\n        // Set to true if you want the form to submit the data as a json object.\n        // This will pass the data as a JavaScript object to the sendWith callback so it is up to you to stringify it for your HTTP library.\n        // If the data contains a File or Blob object the data will be a FormData object regardless of this option (unless strictMode is true).\n        useJson: false,\n\n        // If set to true the form will throw an Error if the data has a File or Blob object and the useJson option is true.\n        strictMode: false,\n\n        // The status code for which the form should handle validation errors.\n        isValidationError: ({ status }) => status === 422,\n\n        // A callback to format the data before sending it.\n        formatData: (data) => data,\n\n        // A callback that should turn the error response into an object of field names and their validation errors.\n        formatErrorResponse: (response) => {\n            let data = response.data || response.response;\n            if (typeof data === 'string') {\n                try {\n                    data = JSON.parse(data);\n                } catch (e) {\n                    throw new Error('Unable to find errors in the response');\n                }\n            }\n            let errors: ErrorValues = data.errors;\n            if (isValidErrorObject(errors)) {\n                throw new Error('Unable to find errors in the response');\n            }\n            return errors;\n        },\n\n        // The number of milliseconds to wait before clearing the error messages.\n        // When timeout is false the error messages will stay indefinitely.\n        timeout: false,\n\n        // When set to true the errors for a field will be cleared when that field's value is updated.\n        autoRemoveError: true,\n\n        // When set to true, the data will be reverted to it's original values after a successful request.\n        clear: true,\n\n        // When set to true, no errors will be recorded.\n        quiet: false,\n\n        // If clone is set to false any nested objects and arrays will be stored in the form by reference.\n        clone: true,\n    };\n\n    static setOptions = function (options: Options) {\n        Form.defaultOptions = {\n            ...Form.defaultOptions,\n            ...options\n        };\n    };\n\n    constructor(data: Data, options: ?Options) {\n        this.setOptions(options);\n\n        this._originalData = {};\n        this._originalConstantData = {};\n        this._data = {};\n\n        this.append(data);\n\n        this._errors = new Errors();\n    }\n\n    setOptions(options: ?Options) {\n        this._options = this._options || Form.defaultOptions;\n        if (options) {\n            this._options = {\n                ...this._options,\n                ...options,\n            }\n        }\n    }\n\n    append(key: string | Data, value: FormValue, constant: ?boolean = false): Form {\n        if (isObj(key)) {\n            Object.keys(key).forEach(field => {\n                this.append(field, key[field], constant);\n            });\n            return this;\n        }\n\n        value = this.parseData(value);\n        if (constant) {\n            set(this._originalConstantData, key, value);\n        } else {\n            set(this._originalData, key, this.parseData(value));\n        }\n        if (!constant) {\n            set(this._data, key, value);\n            this.defineProperty(key);\n        } else {\n            Object.defineProperty(\n                this,\n                key,\n                {\n                    get: () => undefined,\n                    set: () => {\n                        throw new Error(`The \"${key}\" value has been set as constant and cannot be modified`);\n                    }\n                }\n            );\n        }\n\n        return this;\n    }\n\n    defineProperty(key: string) {\n        Object.defineProperty(\n            this,\n            key,\n            {\n                get: () => get(this._data, key),\n                set: (newValue: FormValue) => {\n                    this.setData(key, newValue);\n                }\n            }\n        );\n    }\n\n    constantData(key: string | Data, value: FormValue): Form {\n        return this.append(key, value, true);\n    }\n\n    getData(): Data {\n        return {\n            ...this._data,\n            ...this._originalConstantData,\n        }\n    }\n\n    setData(key: string, value: FormValue) {\n        set(this._data, key, value);\n        if (this._options.autoRemoveError) {\n            this._errors.clear(key);\n        }\n    }\n\n    reset(): Form {\n        for (let field in this._data) {\n            set(this._data, field, this.parseData(get(this._originalData, field)));\n        }\n\n        this._errors.clear();\n\n        return this;\n    }\n\n    clear(field: string): Form {\n        if (hasOwn(this, field)) {\n            set(this._data, field, emptyValue(get(this._data, field)));\n        }\n        return this;\n    }\n\n    parseData(data: FormValue): FormValue {\n        return this._options.clone ? clone(data) : data;\n    }\n\n    addFileFromEvent(event: Event | DragEvent, key: ?string): Form {\n        let node = event.target;\n        if (!(node instanceof HTMLInputElement)) {\n            throw new Error('Incompatible event target, must be of type HTMLInputElement');\n        }\n        if (!key) {\n            key = node.name;\n        }\n        if (key in this && (node.value !== '')) {\n            if (event instanceof DragEvent) {\n                this.setData(key, event.dataTransfer && event.dataTransfer.files.length && event.dataTransfer.files[0]);\n            } else {\n                this.setData(key, node.files && node.files.length && node.files[0]);\n            }\n            node.value = '';\n        }\n        return this;\n    }\n\n    post(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('post', url, options);\n    }\n\n    put(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('put', url, options);\n    }\n\n    patch(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('patch', url, options);\n    }\n\n    delete(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('delete', url, options);\n    }\n\n    get(url: string | Options, options: ?Options): Promise<any> {\n        return this.submit('get', url, options);\n    }\n\n    graphql(query: string, options: ?Options): Promise<any> {\n        options = options || {};\n        const originalFormatDataCallback = options.formatData || this._options.formatData;\n\n        options.url = options.graphql || this._options.graphql;\n\n        options.useJson = !this.hasFile();\n\n        options.formatData = (data) => {\n            data = originalFormatDataCallback ? originalFormatDataCallback(data) : data;\n            const operations = {\n                query,\n                variables: data,\n            };\n\n            if (!this.hasFile()) {\n                return operations;\n            }\n            const { clone, files } = extractFiles(data);\n            operations.variables = clone;\n            return {\n                operations: JSON.stringify(operations),\n                map: JSON.stringify(arrayToObject(Array.from(files.values()))),\n                ...arrayToObject(Array.from(files.keys())),\n            };\n        };\n        return this.post(options);\n    }\n\n    submit(method: Method | Options, url: ?string | Options, options: ?Options): Promise<any> {\n        options = parseOptions(method, url, options);\n        const requestOptions = {\n            ...this._options,\n            ...options,\n        };\n\n        let formData, data = requestOptions.formatData(this.getData());\n        if (this.shouldConvertToFormData(requestOptions)) {\n            formData = new FormData();\n\n            let params = flattenToQueryParams(data);\n\n            Object.keys(params).forEach(key => {\n                formData.append(key, params[key]);\n            });\n\n            data = formData;\n        }\n\n        let httpAdapter = requestOptions.sendWith;\n\n        return httpAdapter(requestOptions.method, this.buildBaseUrl(requestOptions), data, requestOptions).then(response => {\n            if (requestOptions.isValidationError(response)) {\n                this.onFail(response, requestOptions);\n            } else {\n                this.onSuccess(requestOptions);\n            }\n            return response;\n        }).catch(error => {\n            if (requestOptions.isValidationError(error)) {\n                this.onFail(error, requestOptions);\n            }\n            return bubbleError(error);\n        });\n    }\n\n    shouldConvertToFormData(options: ?Options) {\n        options = options || this._options;\n        if (!options.useJson) {\n            return true;\n        }\n        if (this.hasFile() && options.strictMode) {\n            throw new Error('Cannot convert a file to JSON');\n        }\n        return this.hasFile();\n    }\n\n    hasFile(): boolean {\n        return containsFile(this.getData());\n    }\n\n    onSuccess(options: ?Options) {\n        options = options || this._options;\n        if (options.clear) {\n            this.reset();\n        }\n    }\n\n    onFail(error: XMLHttpRequest, options: ?Options) {\n        options = options || this._options;\n        if (!options.quiet) {\n            let errors = options.formatErrorResponse(error);\n            this._errors.record(errors, options.timeout);\n            if (this._errors.hasElements()) {\n                this._errors.scrollToFirst();\n            }\n        }\n    }\n\n    buildBaseUrl(options: ?Options) {\n        options = options || this._options;\n        if (options.url.includes('://')) {\n            return options.url;\n        }\n        let baseUrl = options.baseUrl;\n        let relativeUrl = options.url;\n\n        baseUrl = baseUrl.replace(/\\/+$/g, '');\n        relativeUrl = relativeUrl.replace(/^\\/+/g, '');\n\n        return `${baseUrl}/${relativeUrl}`;\n    }\n\n    makeUrl(options: ?Options): string {\n        let url = this.buildBaseUrl(options);\n        let queryStart = url.includes('?') ? '&' : '?';\n        let fullUrl = url + queryStart;\n        let properties = [];\n        let data = this.getData();\n\n        let params = flattenToQueryParams(data);\n\n        Object.keys(params).forEach(key => {\n            let item = params[key];\n\n            if (isFile(item)) {\n                throw new Error('Cannot convert file to a string');\n            }\n\n            properties.push(key + (isNil(item) ? '' : `=${item}`));\n        });\n        return fullUrl + properties.join('&');\n    }\n\n    addElement(key: string, el: HTMLElement) {\n        this._errors.addElement(key, el);\n    }\n\n    removeElement(el: HTMLElement) {\n        this._errors.removeElement(el);\n    }\n\n    removeElementKey(key: string) {\n        this._errors.removeElementKey(key);\n    }\n}\n\n\nexport default Form;\n","import { ReactNativeFile } from './ReactNativeFile'\nexport function extractFiles(value, path) {\n  if (path === void 0) {\n    path = ''\n  }\n\n  var clone\n  var files = new Map()\n\n  function addFile(paths, file) {\n    var storedPaths = files.get(file)\n    if (storedPaths) storedPaths.push.apply(storedPaths, paths)\n    else files.set(file, paths)\n  }\n\n  if (\n    (typeof File !== 'undefined' && value instanceof File) ||\n    (typeof Blob !== 'undefined' && value instanceof Blob) ||\n    value instanceof ReactNativeFile\n  ) {\n    clone = null\n    addFile([path], value)\n  } else {\n    var prefix = path ? path + '.' : ''\n    if (typeof FileList !== 'undefined' && value instanceof FileList)\n      clone = Array.prototype.map.call(value, function(file, i) {\n        addFile(['' + prefix + i], file)\n        return null\n      })\n    else if (Array.isArray(value))\n      clone = value.map(function(child, i) {\n        var result = extractFiles(child, '' + prefix + i)\n        result.files.forEach(addFile)\n        return result.clone\n      })\n    else if (value && value.constructor === Object) {\n      clone = {}\n\n      for (var i in value) {\n        var result = extractFiles(value[i], '' + prefix + i)\n        result.files.forEach(addFile)\n        clone[i] = result.clone\n      }\n    } else clone = value\n  }\n\n  return {\n    clone: clone,\n    files: files\n  }\n}\n","// @flow\nimport type { Method } from './flow';\nimport type { Data } from \"./Form\";\n\ntype Options = {\n    method: Method,\n    url: string,\n}\n\nexport default function http(method: Method, url: string, data: FormData | Data, options: Options) {\n    let xhr = new XMLHttpRequest();\n\n    let response = new Promise<XMLHttpRequest>((resolve, reject) => {\n        xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                resolve(xhr);\n            } else {\n                reject(xhr);\n            }\n        };\n        xhr.onerror = () => reject(xhr);\n    });\n\n    xhr.open(method, url);\n    if (data instanceof FormData) {\n        xhr.setRequestHeader('Content-Type', 'multipart/form-data');\n        xhr.send(data);\n    } else {\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify(data));\n    }\n\n    return response;\n}"],"sourceRoot":""}